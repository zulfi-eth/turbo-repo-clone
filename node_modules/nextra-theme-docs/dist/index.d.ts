import React, { ReactElement, FC, ReactNode, ComponentProps } from 'react';
import { MdxFile, Heading, PageOpts } from 'nextra';
import { ThemeProviderProps } from 'next-themes/dist/types';
export { useMDXComponents } from '@mdx-js/react';
export { useTheme } from 'next-themes';

interface Item extends MdxFile {
    title: string;
    type: string;
    children?: Item[];
    hidden?: boolean;
    withIndexPage?: boolean;
}
interface PageItem extends MdxFile {
    title: string;
    type: string;
    href?: string;
    newWindow?: boolean;
    children?: PageItem[];
    firstChildRoute?: string;
    hidden?: boolean;
    withIndexPage?: boolean;
}
interface MenuItem extends MdxFile {
    title: string;
    type: 'menu';
    hidden?: boolean;
    children?: PageItem[];
    items?: Record<string, {
        title: string;
        href?: string;
        newWindow?: boolean;
    }>;
}

declare type TOCProps = {
    headings: Heading[];
    filePath: string;
};

declare type NavBarProps = {
    flatDirectories: Item[];
    items: (PageItem | MenuItem)[];
};
declare function Navbar({ flatDirectories, items }: NavBarProps): ReactElement;

declare type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends FC ? T[P] : T[P] extends object ? RecursivePartial<T[P]> : T[P];
};
interface DocsThemeConfig {
    banner: {
        key: string;
        text: ReactNode | FC;
    };
    chat: {
        icon: ReactNode | FC;
        link: string;
    };
    components: Record<string, FC>;
    darkMode: boolean;
    direction: 'ltr' | 'rtl';
    docsRepositoryBase: string;
    editLink: {
        component: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }>;
        text: ReactNode | FC;
    };
    faviconGlyph: string;
    feedback: {
        content: ReactNode | FC;
        labels: string;
    };
    footer: {
        component: ReactNode | FC<{
            menu: boolean;
        }>;
        text: ReactNode | FC;
    };
    gitTimestamp: ReactNode | FC<{
        timestamp: Date;
    }>;
    head: ReactNode | FC;
    i18n: {
        direction?: string;
        locale: string;
        text: string;
    }[];
    logo: ReactNode | FC;
    main: {
        extraContent: ReactNode | FC;
    };
    navbar: ReactNode | FC<NavBarProps>;
    navigation: boolean | {
        next: boolean;
        prev: boolean;
    };
    nextThemes: Pick<ThemeProviderProps, 'defaultTheme' | 'storageKey' | 'forcedTheme'>;
    notFound: {
        content: ReactNode | FC;
        labels: string;
    };
    primaryHue: number | {
        dark: number;
        light: number;
    };
    project: {
        icon: ReactNode | FC;
        link: string;
    };
    search: {
        component: ReactNode | FC<{
            className?: string;
            directories: Item[];
        }>;
        emptyResult: ReactNode | FC;
        placeholder: string | (() => string);
    };
    serverSideError: {
        content: ReactNode | FC;
        labels: string;
    };
    sidebar: {
        defaultMenuCollapsed: boolean;
        titleComponent: ReactNode | FC<{
            title: string;
            type: string;
        }>;
    };
    titleSuffix: string | (() => string);
    toc: {
        component: ReactNode | FC<TOCProps>;
        extraContent: ReactNode | FC;
        float: boolean;
        title: ReactNode | FC;
    };
}

declare type Config = DocsThemeConfig & Pick<PageOpts, 'unstable_flexsearch' | 'newNextLinkBehavior' | 'title' | 'frontMatter'>;
declare const useConfig: () => Config;

declare function Bleed({ full, children }: {
    full: boolean;
    children: ReactNode;
}): ReactElement;

declare const themes: {
    default: string;
    error: string;
    info: string;
    warning: string;
};
declare type CalloutProps = {
    /** Callout Theme default to 'default'  */
    type?: keyof typeof themes;
    /** default emoji ðŸ’¡*/
    emoji: string;
    children: ReactNode;
};
declare function Callout({ children, type, emoji }: CalloutProps): ReactElement;

declare function Collapse({ children, className, open }: {
    children: React.ReactNode;
    className?: string;
    open: boolean;
}): ReactElement;

declare function NotFoundPage(): ReactElement | null;

declare function ServerSideErrorPage(): ReactElement | null;

declare type TabItem = {
    label: ReactElement;
    disabled?: boolean;
};
declare function Tabs({ items, selectedIndex, defaultIndex, onChange, children }: {
    items: ReactNode[] | ReadonlyArray<ReactNode> | TabItem[];
    selectedIndex?: number;
    defaultIndex?: number;
    onChange?: (index: number) => void;
    children: ReactNode;
}): ReactElement;
declare function Tab({ children, ...props }: ComponentProps<'div'>): ReactElement;

declare function Layout(props: any): ReactElement;
declare type PartialDocsThemeConfig = RecursivePartial<DocsThemeConfig>;

export { Bleed, Callout, Collapse, PartialDocsThemeConfig as DocsThemeConfig, Navbar, NotFoundPage, ServerSideErrorPage, Tab, Tabs, Layout as default, useConfig };
