{"/docs":{"title":"Quickstart","data":{"":"Turborepo is a smart build system for JavaScript/TypeScript monorepos: codebases containing multiple projects, often using multiple frameworks, in a single, unified code repository.Unlike other build systems, Turborepo is designed to be incrementally adopted, so you can add it to most codebases in a few minutes.","features#Features":"Turborepo leverages advanced build system techniques to speed up development, both on your local machine and your CI/CD.","examples#Examples":"You can also clone a Turborepo starter repository to get a head start on your monorepo. For even more examples and starters, see the Turborepo examples directory on GitHub."}},"/":{"title":"Home","data":{"":""}},"/blog":{"title":"Blog","data":{"":"Blog\n\n\nThe latest updates and releases from the Turborepo team at Vercel."}},"/docs/ci/gitlabci":{"title":"GitLab CI","data":{"":"The following example shows how to use Turborepo with GitLab CI.For a given root package.json:\n{\n\"name\": \"my-turborepo\",\n\"scripts\": {\n\"build\": \"turbo run build\",\n\"test\": \"turbo run test\"\n},\n\"devDependencies\": {\n\"turbo\": \"1.2.5\"\n}\n}\nAnd a turbo.json:\n{\n\"$schema\": \"https://turborepo.org/schema.json\",\n\"pipeline\": {\n\"build\": {\n\"dependsOn\": [\"^build\"],\n\"outputs\": []\n},\n\"test\": {\n\"dependsOn\": [\"^build\"],\n\"outputs\": []\n},\n}\n}\nCreate a file called .gitlab-ci.yml in your repository with the following contents:\n\n\nimage: node:latest\n# To use Remote Caching, uncomment the next lines and follow the steps below.\n# variables:\n#   TURBO_TOKEN: $TURBO_TOKEN\n#   TURBO_TEAM: $TURBO_TEAM\nstages:\n- build\nbuild:\nstage: build\nscript:\n- npm install\n- npm run build\n- npm run test\n\n\n\nimage: node:latest\n# To use Remote Caching, uncomment the next lines and follow the steps below.\n# variables:\n#   TURBO_TOKEN: $TURBO_TOKEN\n#   TURBO_TEAM: $TURBO_TEAM\nstages:\n- build\nbuild:\nstage: build\nscript:\n- yarn install\n- yarn build\n- yarn test\ncache:\npaths:\n- node_modules/\n- .yarn\n\n\n\nimage: node:latest\n# To use Remote Caching, uncomment the next lines and follow the steps below.\n# variables:\n#   TURBO_TOKEN: $TURBO_TOKEN\n#   TURBO_TEAM: $TURBO_TEAM\nstages:\n- build\nbuild:\nstage: build\nbefore_script:\n- curl -f https://get.pnpm.io/v6.16.js | node - add --global pnpm@6.32.2\n- pnpm config set store-dir .pnpm-store\nscript:\n- pnpm install\n- pnpm build\n- pnpm test\ncache:\nkey: \"$CI_COMMIT_REF_SLUG\"\npaths:\n- .pnpm-store\n\nFor more information visit the pnpm documenation section on GitLab CI integration, view it here","remote-caching#Remote Caching":"To use Remote Caching with GitLab CI, add the following environment variables to your GitLab CI project.\nTURBO_TOKEN - The Bearer token to access the Remote Cache\nTURBO_TEAM - The account to which the monorepo belongs\n\nTo use Vercel Remote Caching, you can get the value of these variables in a few steps:\nCreate a Scoped Access Token to your account in the Vercel Dashboard\n\n\n\n\n\n\nCopy the value to a safe place. You'll need it in a moment.\nGo to your GitLab repository settings and click on the Settings and then CI/CD tab. Create a new variable called TURBO_TOKEN and enter the value of your Scoped Access Token.\n\n\n\n\n\n\n\nMake a second secret called TURBO_TEAM and enter the value of your team's Vercel URL without the vercel.com/. Your Team URL can be found inside your team's general project settings from the dashboard.If you're using a Hobby Plan, you can use your username. Your username can be found in your Vercel Personal Account Settings"}}}